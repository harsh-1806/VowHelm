{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/harsh/Code/VoHelm/src/components/providers/ThemeProvider.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useEffect, useState } from 'react'\n\ntype Theme = 'dark' | 'light' | 'system'\n\ntype ThemeProviderProps = {\n    children: React.ReactNode\n    defaultTheme?: Theme\n    storageKey?: string\n    attribute?: string\n    enableSystem?: boolean\n    disableTransitionOnChange?: boolean\n}\n\ntype ThemeProviderState = {\n    theme: Theme\n    setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n    theme: 'system',\n    setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n    children,\n    defaultTheme = 'system',\n    storageKey = 'vui-theme',\n    attribute = 'class',\n    enableSystem = true,\n    disableTransitionOnChange = false,\n    ...props\n}: ThemeProviderProps) {\n    const [theme, setTheme] = useState<Theme>(defaultTheme)\n\n    // Initialize theme from localStorage after mount\n    useEffect(() => {\n        const storedTheme = localStorage.getItem(storageKey) as Theme\n        if (storedTheme) {\n            setTheme(storedTheme)\n        }\n    }, [storageKey])\n\n    useEffect(() => {\n        const root = window.document.documentElement\n        root.classList.remove('light', 'dark')\n\n        if (theme === 'system' && enableSystem) {\n            const systemTheme = window.matchMedia(\n                '(prefers-color-scheme: dark)'\n            ).matches\n                ? 'dark'\n                : 'light'\n            root.classList.add(systemTheme)\n            return\n        }\n\n        root.classList.add(theme)\n    }, [theme, enableSystem])\n\n    const value = {\n        theme,\n        setTheme: (theme: Theme) => {\n            if (!disableTransitionOnChange) {\n                document.documentElement.style.transition =\n                    'background-color 0.3s ease'\n            }\n            localStorage.setItem(storageKey, theme)\n            setTheme(theme)\n        },\n    }\n\n    return (\n        <ThemeProviderContext.Provider {...props} value={value}>\n            {children}\n        </ThemeProviderContext.Provider>\n    )\n}\n\nexport const useTheme = () => {\n    const context = useContext(ThemeProviderContext)\n\n    if (context === undefined)\n        throw new Error('useTheme must be used within a ThemeProvider')\n\n    return context\n}\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAoBA,MAAM,eAAmC;IACrC,OAAO;IACP,UAAU,IAAM;AACpB;AAEA,MAAM,qCAAuB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAsB;AAExD,SAAS,cAAc,EAC1B,QAAQ,EACR,eAAe,QAAQ,EACvB,aAAa,WAAW,EACxB,YAAY,OAAO,EACnB,eAAe,IAAI,EACnB,4BAA4B,KAAK,EACjC,GAAG,OACc;;IACjB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAS;IAE1C,iDAAiD;IACjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACN,MAAM,cAAc,aAAa,OAAO,CAAC;YACzC,IAAI,aAAa;gBACb,SAAS;YACb;QACJ;kCAAG;QAAC;KAAW;IAEf,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACN,MAAM,OAAO,OAAO,QAAQ,CAAC,eAAe;YAC5C,KAAK,SAAS,CAAC,MAAM,CAAC,SAAS;YAE/B,IAAI,UAAU,YAAY,cAAc;gBACpC,MAAM,cAAc,OAAO,UAAU,CACjC,gCACF,OAAO,GACH,SACA;gBACN,KAAK,SAAS,CAAC,GAAG,CAAC;gBACnB;YACJ;YAEA,KAAK,SAAS,CAAC,GAAG,CAAC;QACvB;kCAAG;QAAC;QAAO;KAAa;IAExB,MAAM,QAAQ;QACV;QACA,UAAU,CAAC;YACP,IAAI,CAAC,2BAA2B;gBAC5B,SAAS,eAAe,CAAC,KAAK,CAAC,UAAU,GACrC;YACR;YACA,aAAa,OAAO,CAAC,YAAY;YACjC,SAAS;QACb;IACJ;IAEA,qBACI,6LAAC,qBAAqB,QAAQ;QAAE,GAAG,KAAK;QAAE,OAAO;kBAC5C;;;;;;AAGb;GArDgB;KAAA;AAuDT,MAAM,WAAW;;IACpB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,YAAY,WACZ,MAAM,IAAI,MAAM;IAEpB,OAAO;AACX;IAPa","debugId":null}}]
}